name: Build and Release sing-box

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Version name"
        required: true
        type: string
      build:
        description: "Build type"
        required: true
        type: choice
        default: "All"
        options:
          - All
          - Binary
  push:
    branches:
      - main-next
      - dev-next

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ github.event_name }}-${{ inputs.build }}
  cancel-in-progress: true

jobs:
  calculate_version:
    name: Calculate version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.set_version.outputs.version }}
    steps:
      - name: Checkout SagerNet/sing-box
        uses: actions/checkout@v4
        with:
          repository: SagerNet/sing-box
          fetch-depth: 0

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.x'

      - name: Check input version (если workflow_dispatch)
        if: github.event_name == 'workflow_dispatch'
        run: |
          echo "version=${{ inputs.version }}" >> "$GITHUB_ENV"

      - name: Calculate version (если не workflow_dispatch)
        if: github.event_name != 'workflow_dispatch'
        run: |
          go run ./cmd/internal/read_tag --ci --nightly > calculated.txt
          echo "version=$(cat calculated.txt)" >> "$GITHUB_ENV"

      - name: Set outputs
        id: set_version
        run: |
          echo "version=$version" >> "$GITHUB_OUTPUT"

  build:
    name: Build binary
    needs: calculate_version
    if: github.event_name != 'workflow_dispatch' || inputs.build == 'All' || inputs.build == 'Binary'
    strategy:
      fail-fast: false
      matrix:
        include:
          - { os: linux, arch: amd64, runner: ubuntu-latest }
          - { os: linux, arch: "386", go386: softfloat, runner: ubuntu-latest }
          - { os: linux, arch: "386", go386: sse2, runner: ubuntu-latest }
          - { os: linux, arch: arm64, runner: ubuntu-latest }
          - { os: linux, arch: arm, goarm: "7", runner: ubuntu-latest }
          - { os: linux, arch: mips, goarch_extra: softfloat, runner: ubuntu-latest }
          - { os: linux, arch: mips64, goarch_extra: softfloat, runner: ubuntu-latest }
          - { os: linux, arch: mips64le, goarch_extra: hardfloat, runner: ubuntu-latest }
          - { os: linux, arch: ppc64le, runner: ubuntu-latest }
          - { os: linux, arch: s390x, runner: ubuntu-latest }
          - { os: linux, arch: riscv64, runner: ubuntu-latest }
          - { os: windows, arch: amd64, runner: windows-latest }
          - { os: windows, arch: "386", runner: windows-latest }
          - { os: windows, arch: arm64, runner: windows-latest }
          - { os: darwin, arch: amd64, runner: macos-latest }
          - { os: darwin, arch: arm64, runner: macos-latest }
    runs-on: ${{ matrix.runner }}
    steps:
      - name: Checkout SagerNet/sing-box
        uses: actions/checkout@v4
        with:
          repository: SagerNet/sing-box
          fetch-depth: 0

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.x'

      - name: Initialize go.mod if missing
        shell: bash
        run: |
          if [ ! -f go.mod ]; then
            echo "Файл go.mod отсутствует, инициализируем..."
            go mod init github.com/sagernet/sing-box
            go mod tidy
          fi

      - name: Initialize go.mod if missing (Windows)
        if: matrix.os == 'windows'
        shell: powershell
        run: |
          if (-not (Test-Path go.mod)) {
            Write-Output "Файл go.mod отсутствует, инициализируем..."
            go mod init github.com/sagernet/sing-box
            go mod tidy
          }

      - name: Ensure GOMODCACHE directory exists
        run: |
          GOMODCACHE=$(/opt/hostedtoolcache/go/1.24.4/x64/bin/go env GOMODCACHE)
          mkdir -p $GOMODCACHE
        shell: bash {0}

      - name: Ensure GOMODCACHE directory exists (Windows)
        if: matrix.os == 'windows'
        shell: powershell
        run: |
          $GOMODCACHE = (go env GOMODCACHE)
          if (-not (Test-Path $GOMODCACHE)) {
            New-Item -ItemType Directory -Path $GOMODCACHE | Out-Null
          }

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ matrix.os }}-${{ hashFiles('go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-${{ matrix.os }}-

      - name: Download dependencies
        run: go mod download

      - name: Clean artifacts directory
        run: |
          rm -rf artifacts || true
          mkdir -p artifacts
        shell: bash {0}

      - name: Clean artifacts directory (Windows)
        if: matrix.os == 'windows'
        shell: powershell
        run: |
          if (Test-Path artifacts) {
            Remove-Item -Recurse -Force artifacts
          }
          New-Item -ItemType Directory -Path artifacts | Out-Null

      - name: Build sing-box
        run: |
          TAGS="with_gvisor,with_quic,with_dhcp,with_wireguard,with_utls,with_acme,with_clash_api,with_tailscale,with_v2ray_api"
          VERSION="${{ needs.calculate_version.outputs.version }}"
          BINARY_NAME="sing-box_${{ matrix.os }}_${{ matrix.arch }}_${{ matrix.goarm || matrix.go386 || matrix.goarch_extra || 'default' }}"
          if [ "${{ matrix.os }}" = "windows" ]; then
            BINARY_NAME="${BINARY_NAME}.exe"
          fi
          GOOS=${{ matrix.os }} GOARCH=${{ matrix.arch }} GOARM=${{ matrix.goarm }} GO386=${{ matrix.go386 }} \
          GOMIPS=${{ matrix.goarch_extra }} GOMIPS64=${{ matrix.goarch_extra }} CGO_ENABLED=0 \
            go build -v -trimpath -tags "$TAGS" \
            -ldflags "-s -buildid= -X 'github.com/sagernet/sing-box/constant.Version=$VERSION'" \
            -o "./artifacts/$BINARY_NAME" ./cmd/sing-box
        shell: bash {0}

      - name: Build sing-box (Windows)
        if: matrix.os == 'windows'
        shell: powershell
        run: |
          $TAGS="with_gvisor,with_quic,with_dhcp,with_wireguard,with_utls,with_acme,with_clash_api,with_tailscale,with_v2ray_api"
          $VERSION="${{ needs.calculate_version.outputs.version }}"
          $BINARY_NAME="sing-box_${{ matrix.os }}_${{ matrix.arch }}_${{ matrix.goarm || matrix.go386 || matrix.goarch_extra || 'default' }}.exe"
          $env:GOOS="${{ matrix.os }}"
          $env:GOARCH="${{ matrix.arch }}"
          if ("${{ matrix.goarm }}" -ne "") { $env:GOARM="${{ matrix.goarm }}" }
          if ("${{ matrix.go386 }}" -ne "") { $env:GO386="${{ matrix.go386 }}" }
          if ("${{ matrix.goarch_extra }}" -ne "") { $env:GOMIPS="${{ matrix.goarch_extra }}"; $env:GOMIPS64="${{ matrix.goarch_extra }}" }
          $env:CGO_ENABLED="0"
          go build -v -trimpath -tags "$TAGS" -ldflags "-s -buildid= -X 'github.com/sagernet/sing-box/constant.Version=$VERSION'" -o "./artifacts/$BINARY_NAME" ./cmd/sing-box

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}_${{ matrix.arch }}${{ matrix.goarm && format('v{0}', matrix.goarm) || '' }}${{ matrix.go386 && format('_{0}', matrix.go386) || '' }}${{ matrix.goarch_extra && format('_{0}', matrix.goarch_extra) || '' }}
          path: artifacts/*

  release:
    name: Create Release
    needs: [calculate_version, build]
    permissions:
      contents: write
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Debug artifact structure
        run: |
          echo "Содержимое директории artifacts:"
          ls -R artifacts

      - name: Create release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ needs.calculate_version.outputs.version }}
          name: sing-box v${{ needs.calculate_version.outputs.version }}
          files: artifacts/*/*
          fail_on_unmatched_files: true
          replace: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
