name: Build and Release sing-box

on:
  workflow_dispatch:
  push:
    branches:
      - main
  schedule:
    - cron: '0 0 * * *'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ github.event_name }}-${{ inputs.build }}
  cancel-in-progress: true

jobs:
  calculate_version:
    name: Calculate version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_tag.outputs.version }}
      tag_exists: ${{ steps.check_tag.outputs.result }}
      changelog: ${{ steps.extract_changelog.outputs.changelog }}
    steps:
      - name: Checkout SagerNet/sing-box
        uses: actions/checkout@v4
        with:
          repository: SagerNet/sing-box
          fetch-depth: 0

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.x'

      - name: Get latest tag
        id: get_tag
        run: |
          LATEST_TAG=$(git describe --tags --abbrev=0 | sed 's/^v*//')
          echo "Latest tag is: $LATEST_TAG"
          echo "version=$LATEST_TAG" >> "$GITHUB_OUTPUT"

      - name: Extract changelog from GitHub release
        id: extract_changelog
        run: |
          VERSION=${{ steps.get_tag.outputs.version }}
          TAG="v${VERSION}"
          CHANGELOG=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/SagerNet/sing-box/releases/tags/${TAG}" | \
            jq -r '.body // "No changelog available"')
          echo "changelog<<EOF" >> "$GITHUB_OUTPUT"
          echo "$CHANGELOG" >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"

      - name: Check if tag already exists in THIS repo
        id: check_tag
        uses: actions/github-script@v7
        with:
          result-encoding: string
          script: |
            const version = '${{ steps.get_tag.outputs.version }}';
            const tagName = `v${version}`;
            try {
              await github.rest.git.getRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: `tags/${tagName}`
              });
              return 'true';
            } catch (err) {
              if (err.status === 404) {
                return 'false';
              }
              throw err;
            }

  build:
    name: Build binary
    needs: calculate_version
    if: needs.calculate_version.outputs.tag_exists == 'false'
    strategy:
      fail-fast: false
      matrix:
        include:
          - { os: linux, arch: amd64, runner: ubuntu-latest }
          - { os: linux, arch: "386", go386: softfloat, runner: ubuntu-latest }
          - { os: linux, arch: "386", go386: sse2, runner: ubuntu-latest }
          - { os: linux, arch: arm64, runner: ubuntu-latest }
          - { os: linux, arch: arm, goarm: "7", runner: ubuntu-latest }
          - { os: linux, arch: mips, goarch_extra: softfloat, runner: ubuntu-latest }
          - { os: linux, arch: mips64, goarch_extra: softfloat, runner: ubuntu-latest }
          - { os: linux, arch: mips64le, goarch_extra: hardfloat, runner: ubuntu-latest }
          - { os: linux, arch: ppc64le, runner: ubuntu-latest }
          - { os: linux, arch: s390x, runner: ubuntu-latest }
          - { os: linux, arch: riscv64, runner: ubuntu-latest }
          - { os: windows, arch: amd64, runner: windows-latest }
          - { os: windows, arch: "386", runner: windows-latest }
          - { os: windows, arch: arm64, runner: windows-latest }
          - { os: darwin, arch: amd64, runner: macos-latest }
          - { os: darwin, arch: arm64, runner: macos-latest }
    runs-on: ${{ matrix.runner }}
    steps:
      - name: Checkout SagerNet/sing-box
        uses: actions/checkout@v4
        with:
          repository: SagerNet/sing-box
          fetch-depth: 0

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.x'

      - name: Initialize go.mod if missing
        shell: bash
        run: |
          if [ ! -f go.mod ]; then
            echo "Файл go.mod отсутствует, инициализируем..."
            go mod init github.com/sagernet/sing-box
            go mod tidy
          fi

      - name: Initialize go.mod if missing (Windows)
        if: matrix.os == 'windows'
        shell: powershell
        run: |
          if (-not (Test-Path go.mod)) {
            Write-Output "Файл go.mod отсутствует, инициализируем..."
            go mod init github.com/sagernet/sing-box
            go mod tidy
          }

      - name: Cache Go modules
        if: matrix.os != 'darwin'
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies
        run: go mod download

      - name: Build sing-box
        if: matrix.os != 'windows'
        run: |
          TAGS="with_gvisor,with_quic,with_dhcp,with_utls,with_acme,with_clash_api,with_tailscale,with_v2ray_api"
          VERSION="${{ needs.calculate_version.outputs.version }}"
          BINARY_NAME="sing-box-${{ matrix.os }}-${{ matrix.arch }}"
          mkdir -p artifacts
          GOOS=${{ matrix.os }} GOARCH=${{ matrix.arch }} GOARM=${{ matrix.goarm }} GO386=${{ matrix.go386 }} \
          GOMIPS=${{ matrix.goarch_extra }} GOMIPS64=${{ matrix.goarch_extra }} CGO_ENABLED=0 \
            go build -v -trimpath -tags "$TAGS" \
            -ldflags "-s -buildid= -X 'github.com/sagernet/sing-box/constant.Version=$VERSION'" \
            -o "./artifacts/$BINARY_NAME" ./cmd/sing-box
        shell: bash {0}

      - name: Build sing-box (Windows)
        if: matrix.os == 'windows'
        shell: powershell
        run: |
          $TAGS="with_gvisor,with_quic,with_dhcp,with_wireguard,with_utls,with_acme,with_clash_api,with_tailscale,with_v2ray_api"
          $VERSION="${{ needs.calculate_version.outputs.version }}"
          $BINARY_NAME="sing-box-${{ matrix.os }}-${{ matrix.arch }}.exe"
          New-Item -ItemType Directory -Force -Path artifacts | Out-Null
          $env:GOOS="${{ matrix.os }}"
          $env:GOARCH="${{ matrix.arch }}"
          if ("${{ matrix.goarm }}" -ne "") { $env:GOARM="${{ matrix.goarm }}" }
          if ("${{ matrix.go386 }}" -ne "") { $env:GO386="${{ matrix.go386 }}" }
          if ("${{ matrix.goarch_extra }}" -ne "") { $env:GOMIPS="${{ matrix.goarch_extra }}"; $env:GOMIPS64="${{ matrix.goarch_extra }}" }
          $env:CGO_ENABLED="0"
          go build -v -trimpath -tags "$TAGS" -ldflags "-s -buildid= -X 'github.com/sagernet/sing-box/constant.Version=$VERSION'" -o "./artifacts/$BINARY_NAME" ./cmd/sing-box

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}_${{ matrix.arch }}${{ matrix.goarm && format('v{0}', matrix.goarm) || '' }}${{ matrix.go386 && format('_{0}', matrix.go386) || '' }}${{ matrix.goarch_extra && format('_{0}', matrix.goarch_extra) || '' }}
          path: artifacts/*

  release:
    name: Create Release
    needs: [calculate_version, build]
    permissions:
      contents: write
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Debug artifact structure
        run: |
          echo "Содержимое директории artifacts:"
          ls -R artifacts

      - name: Create release
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs').promises;
            const path = require('path');
            
            // Define variables from workflow outputs
            const version = '${{ needs.calculate_version.outputs.version }}';
            const tagName = `v${version}`;
            const releaseName = `Release v${version}`;
            const body = '${{ needs.calculate_version.outputs.changelog }}';
            const artifactDir = 'artifacts';
      
            // Function to recursively get all artifact files
            async function getArtifactFiles(dir) {
              let files = [];
              const items = await fs.readdir(dir, { withFileTypes: true });
              for (const item of items) {
                const fullPath = path.join(dir, item.name);
                if (item.isDirectory()) {
                  files = files.concat(await getArtifactFiles(fullPath));
                } else {
                  files.push(fullPath);
                }
              }
              return files;
            }

            // Create the release
            const release = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: tagName,
              name: releaseName,
              body: body,
              draft: false,
              prerelease: tagName.includes('beta')
            });
      
            // Upload artifacts
            const files = await getArtifactFiles(artifactDir);
            for (const file of files) {
              console.log(`Uploading ${file}...`);
              await github.rest.repos.uploadReleaseAsset({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: release.data.id,
                name: path.basename(file),
                data: await fs.readFile(file)
              });
            }
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
