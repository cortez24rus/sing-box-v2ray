name: Build and Release sing-box

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Version name"
        required: true
        type: string
      build:
        description: "Build type"
        required: true
        type: choice
        default: "All"
        options:
          - All
          - Binary
          - Android

  push:
    branches:
      - main-next
      - dev-next

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ github.event_name }}-${{ inputs.build }}
  cancel-in-progress: true

jobs:
  calculate_version:
    name: Calculate version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.set_version.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.x'

      - name: Check input version (если workflow_dispatch)
        if: github.event_name == 'workflow_dispatch'
        run: |
          echo "version=${{ inputs.version }}" >> "$GITHUB_ENV"

      - name: Calculate version (если не workflow_dispatch)
        if: github.event_name != 'workflow_dispatch'
        run: |
          # Пример: скрипт, который внутри проекта вычисляет версию:
          go run ./cmd/internal/read_tag --ci --nightly > calculated.txt
          echo "version=$(cat calculated.txt)" >> "$GITHUB_ENV"

      - name: Set outputs
        id: set_version
        run: |
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"

  build:
    name: Build binary
    needs: calculate_version
    if: github.event_name != 'workflow_dispatch' || inputs.build == 'All' || inputs.build == 'Binary'
    strategy:
      fail-fast: false
      matrix:
        include:
          - { os: linux,   arch: amd64,   runner: ubuntu-latest }
          - { os: linux,   arch: 386,     go386: softfloat, runner: ubuntu-latest }
          - { os: linux,   arch: 386,     go386: sse2,       runner: ubuntu-latest }
          - { os: linux,   arch: arm64,   runner: ubuntu-latest }
          - { os: linux,   arch: arm,     goarm: "7",       runner: ubuntu-latest }
          - { os: linux,   arch: mips,    goarch_extra: softfloat, runner: ubuntu-latest }
          - { os: linux,   arch: mips64,  goarch_extra: softfloat, runner: ubuntu-latest }
          - { os: linux,   arch: mips64le, goarch_extra: hardfloat, runner: ubuntu-latest }
          - { os: linux,   arch: ppc64le, runner: ubuntu-latest }
          - { os: linux,   arch: s390x,   runner: ubuntu-latest }
          - { os: linux,   arch: riscv64, runner: ubuntu-latest }
          - { os: windows, arch: amd64,   runner: windows-latest }
          - { os: windows, arch: 386,     runner: windows-latest }
          - { os: windows, arch: arm64,   runner: windows-latest }
          - { os: darwin,  arch: amd64,   runner: macos-latest }
          - { os: darwin,  arch: arm64,   runner: macos-latest }
          - { os: android, arch: arm64, ndk: "aarch64-linux-android21", runner: ubuntu-latest }
          - { os: android, arch: arm,   ndk: "armv7a-linux-androideabi21", runner: ubuntu-latest }
          - { os: android, arch: amd64, ndk: "x86_64-linux-android21",   runner: ubuntu-latest }
          - { os: android, arch: 386,   ndk: "i686-linux-android21",     runner: ubuntu-latest }

    runs-on: ${{ matrix.runner }}
    defaults:
      run:
        # Убираем "./sing-box" — go.mod лежит в корне
        working-directory: .

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.x'

      - name: Cache Go modules 
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/.modcache
          key: ${{ runner.os }}-go-${{ hashFiles('go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Get project dependencies
        run: go mod download

      - name: Setup Android NDK (для Android)
        if: matrix.os == 'android'
        uses: nttld/setup-ndk@v1
        with:
          ndk-version: r28
          local-cache: true

      - name: Build sing-box (не-Android)
        if: matrix.os != 'android'
        run: |
          TAGS="with_gvisor,with_quic,with_dhcp,with_wireguard,with_utls,with_acme,with_clash_api,with_tailscale"
          VERSION="${{ needs.calculate_version.outputs.version }}"
          BINARY_NAME="sing-box_${{ matrix.os }}_${{ matrix.arch }}"
          if [ "${{ matrix.os }}" = "windows" ]; then
            BINARY_NAME="${BINARY_NAME}.exe"
          fi

          GOOS=${{ matrix.os }} \
          GOARCH=${{ matrix.arch }} \
          GOARM=${{ matrix.goarm }} \
          GO386=${{ matrix.go386 }} \
          GOMIPS=${{ matrix.goarch_extra }} \
          CGO_ENABLED=0 \
            go build -v -trimpath -tags "$TAGS" \
            -ldflags "-s -buildid= -X 'github.com/sagernet/sing-box/constant.Version=$VERSION'" \
            -o "../artifacts/${BINARY_NAME}" ./cmd/sing-box

      - name: Build sing-box (Android)
        if: matrix.os == 'android'
        run: |
          TAGS="with_gvisor,with_quic,with_dhcp,with_wireguard,with_utls,with_acme,with_clash_api,with_tailscale"
          VERSION="${{ needs.calculate_version.outputs.version }}"
          BINARY_NAME="sing-box_${{ matrix.os }}_${{ matrix.arch }}"

          export CC="${{ matrix.ndk }}-clang"
          export CXX="${CC}++"

          GOOS=${{ matrix.os }} \
          GOARCH=${{ matrix.arch }} \
          CGO_ENABLED=1 \
            go build -v -trimpath -tags "$TAGS" \
            -ldflags "-s -buildid= -X 'github.com/sagernet/sing-box/constant.Version=$VERSION'" \
            -o "../artifacts/${BINARY_NAME}" ./cmd/sing-box

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}_${{ matrix.arch }}${{ matrix.goarm && format('v{0}', matrix.goarm) || '' }}${{ matrix.go386 && format('_{0}', matrix.go386) || '' }}${{ matrix.goarch_extra && format('_{0}', matrix.goarch_extra) || '' }}
          path: artifacts/*

  release:
    name: Create Release
    needs: [calculate_version, build]
    permissions:
      contents: write
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ needs.calculate_version.outputs.version }}
          name: sing-box v${{ needs.calculate_version.outputs.version }}
          files: |
            artifacts/*/*
          fail_on_unmatched_files: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
